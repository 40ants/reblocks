
We must provide an extensible set of renderers that generically render objects into commonly used UI elements. The renderers must be easily customizable (allow for changing field names, order, visibility, render function, etc.) as well as extensible (all overriding renderers for a particular class).

(demethod render-data (some-object &key (render-slot-data #'render-data-slot) human-assoc )
    ...)
(render-form some-object)

(render-table-row-data some-object)
(render-table-row-form some-object)
(render-table-header some-object)

(reder-table some-objects)


The renderer for classes will behave in the following manner:
1. All slots will be extracted from the class.
2. Only the ones that have reader accessor will be renderered
   - Unless slot names are provided explicitly, in which
     case reader accessor will be tried and if it doesn't exist
     slot-value will be used


TODO:
2. Figure out how to deal with
   - slots that are collections
     - don't render at all
     - render as links to data grids
     - if small collection, render member names inline
4. Make sure generic renderers look good out of the box (reference css)
5. Make sure slots without readers are rendered if their names are passed in slot-names.
6. Reorganize, document, and unittest the hell out of everything
7. Create renderers for forms, tables, and lists
7.5. Release the library?
8. Create generic form readers (or scanners or derenderers, whatever)
9. Create a data-form widget along with appropriate machinery
10. Create a data-grid widget (pageable, sortable, along with ajaxy view and edit functionality that automagically scales back)
11. Create an ajaxy modal "dialog" widget along with appropriate machinery, as well as modal request in general.
12. Release the library?
13. Create a reference application.

